services:
  redis:
    image: redis:7.2.4
    restart: on-failure
    networks:
      - sai
  sai:
    image: node:22-alpine
    restart: on-failure
    networks:
      - sai
    expose:
      - 4000
    ports:
      - 9229:9229 # node debugger
    working_dir: /sai/packages/service
    command: ["node", "--inspect", "dist/componentsMain.js"]
    dns:
      - 172.28.61.253
    volumes:
      - ./:/sai
      - ${CAROOT}:/mkcert
    environment:
      - NODE_ENV=development
      - BASE_URL=https://sai.docker
      - CLIENT_NAME=Solid Authorization Service
      - PORT=4000
      - FRONTEND_URL=http://ui.sai.docker/
      - FRONTEND_AUTHORIZATION_URL=http://ui.sai.docker/authorize
      - VAPID_PUBLIC_KEY=BNUaG9vwp-WE_cX-3dNLebyczW_RivE8wHECIvZIUMUZ3co6P79neE3hueJJtFcg5ezTZ25T1ITciujz-mlAcnY
      - VAPID_PRIVATE_KEY=8d8mM59L2VptBg5hX_2dHnQ7T5VpeUsftbaQ6PfuhGA
      - PUSH_NOTIFICATION_EMAIL=mailto:example@yourdomain.org
      - NODE_EXTRA_CA_CERTS=/mkcert/rootCA.pem
    labels:
      - traefik.enable=true
      - traefik.http.routers.sai.rule=Host(`sai.docker`)
      - traefik.http.routers.sai.entrypoints=websecure
      - traefik.http.routers.sai.tls=true
      - traefik.http.services.sai.loadbalancer.server.port=4000
      - traefik.http.middlewares.testheader.headers.customrequestheaders.X-Forwarded-Proto=https
  css:
    image: node:22-alpine
    restart: on-failure
    networks:
      - sai
    dns:
      - 172.28.61.253
    expose:
      - 3000
    working_dir: /sai/packages/css-storage-fixture
    command: ["npm", "run", "dev"]
    volumes:
      - ./:/sai
      - ${CAROOT}:/mkcert
    environment:
      - CSS_CONFIG=/sai/packages/css-storage-fixture/config.json
      - CSS_LOGGING_LEVEL=info
      - CSS_ROOT_FILE_PATH=/sai/packages/css-storage-fixture/dev
      - CSS_BASE_URL=https://pod.docker
      - NODE_EXTRA_CA_CERTS=/mkcert/rootCA.pem
    labels:
      - traefik.enable=true
      - traefik.http.routers.pod.rule=Host(`pod.docker`) || HostRegexp(`^.+\.pod\.docker$`)
      - traefik.http.routers.pod.entrypoints=websecure
      - traefik.http.routers.pod.tls=true
      - traefik.http.services.pod.loadbalancer.server.port=3000
      - traefik.http.middlewares.testheader.headers.customrequestheaders.X-Forwarded-Proto=https
  ui:
    image: node:22-alpine
    restart: on-failure
    networks:
      - sai
    expose:
      - 4200
    working_dir: /sai/ui/authorization
    command: ["npm", "run", "dev"]
    volumes:
      - ./:/sai
    labels:
      - traefik.enable=true
      - traefik.http.routers.ui-sai.rule=Host(`ui.sai.docker`)
      - traefik.http.routers.ui-sai.entrypoints=websecure
      - traefik.http.routers.ui-sai.tls=true
      - traefik.http.services.ui-sai.loadbalancer.server.port=4200
  vuejectron:
    image: node:22-alpine
    restart: on-failure
    networks:
      - sai
    expose:
      - 4500
    working_dir: /sai/examples/vuejectron
    command: ["npm", "run", "dev"]
    volumes:
      - ./:/sai
    labels:
      - traefik.enable=true
      - traefik.http.routers.vuejectron.rule=Host(`vuejectron.docker`)
      - traefik.http.routers.vuejectron.entrypoints=websecure
      - traefik.http.routers.vuejectron.tls=true
      - traefik.http.services.vuejectron.loadbalancer.server.port=4500

  router:
    image: traefik:v3.0.4
    container_name: router
    restart: on-failure
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/conf/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/certs/cert.pem:/etc/traefik/cert.pem
      - ./traefik/certs/key.pem:/etc/traefik/key.pem
    labels:
      - traefik.enable=true
      - traefik.http.routers.router.rule=Host(`router${SHARED_DOMAIN_SEGMENT}.docker`)
      - traefik.http.routers.router.entrypoints=websecure
      - traefik.http.services.router.loadbalancer.server.port=8080
      - traefik.http.routers.router.tls=true
    healthcheck:
      test: ['CMD-SHELL', 'traefik healthcheck --ping']
      interval: 4s
      timeout: 4s
      retries: 8
      start_period: 4s
    networks:
      sai:
        ipv4_address: 172.28.61.250

  dns:
    image: drpsychick/dnsmasq:latest
    container_name: dnsmasq
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - '53:53/tcp'
      - '53:53/udp'
    cap_add:
      - NET_ADMIN
    healthcheck:
      test: ['CMD-SHELL', 'nslookup localhost 127.0.0.1 || exit 1']
      interval: 4s
      timeout: 4s
      retries: 8
      start_period: 4s
    networks:
      sai:
        ipv4_address: 172.28.61.253

networks:
  sai:
    name: network.${COMPOSE_PROJECT_NAME}
    internal: false
    ipam:
      config:
        - subnet: 172.28.61.0/24
